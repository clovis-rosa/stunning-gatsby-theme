:root {
  // FONT FAMILY
  --font-family-base: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  --font-family-display: "Roboto", sans-serif;
}

body {
  font-family: var(--font-family-base);
  font-size: 16px;
  line-height: 1.5;
  text-align: left;
  text-rendering: optimizeSpeed;
  color: var(--color-dark);
}

/*
Using clamp() for responsive fonts:
===================================
Wes Bos twitter: https://twitter.com/wesbos/status/1266032189197611014

=> Min value, Flexible value in between, Max value

clamp(var(min value), calc(flex value between), max value;

E.g.: font-size: clamp(10px, calc(1vw + 10px), 40px);
E.g.: font-size: clamp(var(--size-700), calc(1rem + 4vw), var(--size-major));

Question - What is the logic behind using calc(1vw + 10px) for the middle value?
Answer: It makes it scale up+down with browser resizes. Otherwise 1vw is always the same size no matter how much you scale your browser up/down


For more reliable browser support I usually do this:
----------------------------------------------------

E.g.: font-size: calc(16px + (28 - 16) * ((100vw - 320px) / (1600 - 320)));

=> Font will scale from 16px - 28px in between the viewport of 320px - 1600px:

E.g.: font-size: calc([min size] + ([max size] - [min size]) * ((100vw - [min viewport width]) / ([max viewport width] - [min viewport width])));

clamp(1.8rem, 2.5vw, 2.8rem);
*/

.title-1,
.title-2,
.title-3,
.title-4,
.title-5,
.title-6,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 700;
  line-height: 1.25;
  letter-spacing: -0.016em;
  color: var(--color-dark);
  cursor: default;

  // + p {
  //   // margin-top: 0;
  // }
}

.title-1,
h1 {
  font-size: 4rem;
  font-size: clamp(3rem, calc(1rem + 4vw), 4rem);
}
.title-2,
h2 {
  font-size: 3.5rem;
  font-size: clamp(2.5rem, calc(1rem + 4vw), 3.5rem);
}
.title-3,
h3 {
  font-size: 3rem;
  font-size: clamp(2rem, calc(1rem + 4vw), 3rem);
}
.title-4,
h4 {
  font-size: 2.5rem;
  font-size: clamp(1.5rem, calc(1rem + 4vw), 2.5rem);
}

h5 {
  font-size: 2rem;
  margin-top: clamp(1.625rem, calc(1rem + 4vw), 2.625rem);
  margin-bottom: clamp(1.625rem, calc(1rem + 4vw), 2.625rem);

  &:first-of-type:no[class] {
    margin-top: 0;
    margin-bottom: clamp(1.625rem, calc(1rem + 4vw), 3rem);
  }
}

h6 {
  font-size: 1.15rem; // 1rem
  margin-top: clamp(1.5rem, calc(1rem + 4vw), 2rem);
  margin-bottom: clamp(1.5rem, calc(1rem + 4vw), 2rem);

  &.page-title:first-of-type:no[class] {
    margin-top: 0;
    margin-bottom: clamp(1.625rem, calc(1rem + 4vw), 3rem);
  }
  &.feature__title {
    margin-top: 1rem;
    margin-bottom: 0;
  }
}

p,
li,
a {
  font-size: 1.25rem;
  // Min value, Flexible value in between, Max value
  font-size: clamp(0.8rem, calc(0.6rem + 2vw), 1.25rem);
  font-weight: 400;
  line-height: 1.6;
  letter-spacing: 0.004em;
  color: var(--color-dark-light);
}

p {
  margin-top: 1rem;
  margin-bottom: 0.5rem;
}

p.small {
  font-size: 1.063rem;
  margin-top: 1rem;
}
